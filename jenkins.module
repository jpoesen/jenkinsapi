<?php
/**
 * @file
 * Provides integration with Jenkins for jobs management.
 */

/**
 * Implements hook_menu().
 */
function jenkins_menu() {
  $items = array();

  $items['admin/config/services/jenkins'] = array(
    'title' => 'Jenkins',
    'description' => 'Configuration for Jenkins API module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('jenkins_settings'),
    'access arguments' => array('administer jenkins config'),
    'file' => 'jenkins.admin.inc',
  );

  $items['jenkins/log/%/%'] = array(
    'title' => 'Jenkins log',
    'description' => 'Stream a jenkins build log',
    'page callback' => 'jenkins_log',
    'page arguments' => array(2, 3),
    'access arguments' => array('view jenkins streaming logs'),
    'type' => MENU_CALLBACK,
  );

  $items['jenkins/stream-log/%/%/%'] = array(
    'title' => 'Stream jenkins log',
    'description' => 'Stream a jenkins build log',
    'page callback' => 'jenkins_stream_log',
    'page arguments' => array(2, 3, 4),
    'access arguments' => array('view jenkins streaming logs'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Get a single build.
 *
 * @param string $name
 *   Job name.
 * @param int $number
 *    build number
 */
function jenkins_build_get($name, $number, &$response = NULL) {
  if (!jenkins_is_job_name_valid($name)) {
    return FALSE;
  }

  $name = rawurlencode($name);
  $number = (int) $number;

  return jenkins_request("/job/{$name}/{$number}/api/json", $response);
}

/**
 * Retrieves full Jenkins build log for a job.
 *
 * @param string $name
 *   The name of the Jenkins job.
 * @param int $number
 *   The job build number.
 *
 * @return object
 *   The http_request() response object.
 */
function jenkins_build_get_log($name, $number, &$response = NULL) {
  $response = NULL;
  return jenkins_request("/job/{$name}/{$number}/consoleText", $response);
}

/**
 * Returns the path to a Jenkins build log based on the queue id.
 *
 * @todo throw an exceptions on error or pending.
 *
 * @param int $queue_id
 *   The queue id to use for the lookup.
 *
 * @return array
 *   Information about the current state of the item in the queue.
 */
function jenkins_get_build_info_from_queue_id($queue_id) {

  $state = array(
    'error' => FALSE,
    'building' => FALSE,
    'message' => '',
    'build_id' => 0,
  );

  $url = variable_get('jenkins_base_url', 'http://localhost:8080') . "/queue/item/{$queue_id}/api/json";

  $reply = drupal_http_request($url, array('max_redirects' => 0));
  if (200 != $reply->code) {
    // Assume 404.
    $state['error'] = TRUE;
    $state['message'] = t('Build completed.');
    return $state;
  }

  $json = json_decode($reply->data);
  if (isset($json->executable->number)) {
    // We are building.
    $state['building'] = TRUE;
    $state['build_id'] = (int) $json->executable->number;
    return $state;
  }

  // This explains why it is still waiting.
  if (isset($json->why)) {
    $state['message'] = $json->why;
    return $state;
  }

  $state['error'] = TRUE;
  $state['message'] = t('Unknown error.');
  return $state;
}

/**
 * Extracts the jenkins build queue id from the HTTP response object.
 *
 * @todo throw exception if queue id isn't available.
 *
 * @param object $response
 *   The response object returned from drupal_http_request().
 *
 * @return int
 *   The jenkins queue id or 0 on error.
 */
function jenkins_get_queue_id_from_response($response) {

  if (!isset($response->headers['location'])) {
    return 0;
  }

  $location = $response->headers['location'];

  $matches = array();
  if (!preg_match('#/queue/item/(\d+)/$#', $location, $matches)) {
    return 0;
  }

  $id = $matches[1];
  if (!is_numeric($id)) {
    return 0;
  }

  return $id;
}

/**
 * Trigger a build for a jenkins job.
 *
 * @param string $job
 *   Job name. Must be URL encoded.
 *
 * @return int
 *   The job number, or 0 on error.
 */
function jenkins_job_build($job, $params = NULL, &$response = NULL) {
  if (!jenkins_is_job_name_valid($job)) {
    return 0;
  }

  $url = "/job/{$job}/build";

  $data = array();
  if (is_array($params) && count($params)) {
    $data = array('parameter' => array());
    foreach ($params as $name => $value) {
      $data['parameter'][] = array('name' => urlencode($name), 'value' => urlencode($value));
    }
  }

  $json = 'json=' . json_encode($data);
  $headers = array('Content-Type' => 'application/x-www-form-urlencoded');

  if (!jenkins_request($url, $response, array(), 'POST', $json, $headers)) {
    return 0;
  }

  $queue_id = jenkins_get_queue_id_from_response($response);
  return $queue_id;
}

/**
 * Copy/clone a job.
 *
 * @param $name
 *   Job name.
 * @param $existing
 *   Job name of the job to copy.
 */
function jenkins_job_copy($name, $existing, &$response = NULL) {
  if (!jenkins_is_job_name_valid($name) || !jenkins_is_job_name_valid($existing)) {
    return FALSE;
  }

  $query = array(
    'name' => $name,
    'mode' => 'copy',
    'from' => $existing,
  );

  $headers = array(
    'Accept' => 'application/json',
    'Content-Type' => 'application/json',
  );

  return jenkins_request('/createItem', $response, $query, 'POST', NULL, $headers);
}

/**
 * Create a job.
 *
 * @param $name
 *   Job name.
 * @param $xml
 *   XML string with job properties (config.xml).
 */
function jenkins_job_create($name, $xml, &$response = NULL) {
  if (!jenkins_is_job_name_valid($name)) {
    return FALSE;
  }

  $name = rawurlencode($name);

  $query = array(
    'name' => $name,
  );

  $headers = array(
    'Content-Type' => 'text/xml',
  );

  return jenkins_request('/createItem', $response, $query, 'POST', $xml, $headers);
}

/**
 * Deletes a job.
 *
 * @param $name
 *   Job name.
 */
function jenkins_job_delete($name, &$response = NULL) {
  if (!jenkins_is_job_name_valid($name)) {
    return FALSE;
  }

  $name = rawurlencode($name);

  return jenkins_request("/job/{$name}/doDelete", $response, array(), 'POST');
}

/**
 * Disables a job.
 *
 * @param $name
 *   Job name.
 */
function jenkins_job_disable($name, &$response = NULL) {
  if (!jenkins_is_job_name_valid($name)) {
    return FALSE;
  }

  $name = rawurlencode($name);

  return jenkins_request("/job/{$name}/disable", $response, array(), 'POST');
}

/**
 * Enables a job.
 *
 * @param $name
 *   Job name.
 */
function jenkins_job_enable($name, &$response = NULL) {
  if (!jenkins_is_job_name_valid($name)) {
    return FALSE;
  }

  $name = rawurlencode($name);

  return jenkins_request("/job/{$name}/enable", $response, array(), 'POST');
}

/**
 * Get a single job.
 *
 * @param $name
 *   Job name.
 */
function jenkins_job_get($name, &$response = NULL) {
  if (!jenkins_is_job_name_valid($name)) {
    return FALSE;
  }

  $name = rawurlencode($name);

  if (jenkins_request("/job/{$name}/api/json", $response)) {
    return json_decode($response->data);
  }

  return FALSE;
}

/**
 * Update an existing job.
 *
 * @param $name
 *   Job name.
 * @param $xml
 *   XML string with job properties (config.xml).
 */
function jenkins_job_update($name, $xml, &$response = NULL) {
  if (!jenkins_is_job_name_valid($name)) {
    return FALSE;
  }

  $name = rawurlencode($name);

  $headers = array(
    'Content-Type' => 'text/xml',
  );

  return jenkins_request("/job/{$name}/config.xml", $response, array(), 'POST', $xml, $headers);
}

/**
 * Get a list of jobs.
 *
 * @param $depth
 *   Integer that tells how much data to get from Jenkins.
 * @param $tree
 *   Array describing what data to return. It should be on the form.
 */
function jenkins_jobs_get($depth = 0, $tree = NULL, &$response = NULL) {
  // @todo: honor $tree argument.
  $query = array(
    'depth' => $depth,
  );

  $name = rawurlencode($name);

  if (jenkins_request('/api/json', $response, $query)) {
    return json_decode($response->data);
  }

  return FALSE;
}

/**
 * Validates a jenkins job name.
 *
 * Based on Hudson.java.checkGoodName() and java's native Character.isISOControl().
 *
 * @param String $name
 *   The name of the job to validate.
 *
 * @return bool
 *   Is the name valid?
 */
function jenkins_is_job_name_valid($name) {
  if (preg_match('~(\\?\\*/\\\\%!@#\\$\\^&\|<>\\[\\]:;)+~', $name)) {
    return FALSE;
  }

  // Define range of non printable characters.
  $non_print_high = 31;

  // Value PHP assigns if invalid or extended ascii character (? == 63).
  $ascii_garbage = 63;

  $len = drupal_strlen($name);
  for ($i = 0; $len > $i; ++$i) {
    // Unicode char to ord logic lifted from http://stackoverflow.com/questions/1365583/how-to-get-the-character-from-unicode-value-in-php
    $char = drupal_substr($name, $i, 1);
    $unpacked = unpack('N', mb_convert_encoding($char, 'UCS-4BE', 'UTF-8'));
    $ord = $unpacked[1];

    if ($ord <= $non_print_high || $ord == $ascii_garbage) {
      return FALSE;
    }
  }

  return TRUE;
}

/**
 * Perform a request to Jenkins server and return the response.
 *
 * @param string $path
 *   API path with leading slash, for example '/api/json'.
 * @param object $response
 *   HTTP request response object - see drupal_http_request()
 * @param $query
 *   Data to be sent as query string.
 * @param string $method
 *   HTTP method, either 'GET' (default) or 'POST'.
 * @param array $data
 *   Post data.
 * @param array $headers
 *   HTTP headers.
 *
 * @return bool
 *    TRUE if the request was successful.
 */
function jenkins_request($path, &$response = NULL, $query = array(), $method = 'GET', $data = NULL, $headers = array()) {
  $url = variable_get('jenkins_base_url', 'http://localhost:8080') . $path;
  $options = array(
    'method' => $method,
    'max_redirects' => 0,
  );

  // Force request to start immediately.
  if (!isset($query['delay'])) {
    $query['delay'] = '0sec';
  }

  $url .= '?' . drupal_http_build_query($query);

  if ($method == 'POST' && !empty($data)) {
    $options['data'] = $data;
  }

  // Default to JSON unless otherwise specified.
  $default_headers = array(
    'Accept' => 'application/json',
    'Content-Type' => 'application/json',
  );
  $headers += $default_headers;

  if (!empty($headers)) {
    $options['headers'] = $headers;
  }

  // Do HTTP request and get response object.
  $response = drupal_http_request($url, $options);

  // Response code should be something between 200 and 202.
  return in_array($response->code, range(200, 202));
}

/**
 * Parse job configuration arguments string into an array.
 *
 * @params string $args
 *   The configuration arguments to parse.
 *
 * @return array
 *   The arguments as an array.
 */
function jenkins_parse_args($args) {
  $values = array();

  $list = explode("\n", $args);
  $list = array_map('trim', $list);
  foreach ($list as $line) {
    $parts = explode('=', $line, 2);
    $values[$parts[0]] = $parts[1];
  }

  return $values;
}

/**
 * Jenkins log page callback.
 */
function jenkins_log($name, $build_id) {
  $response = NULL;
  jenkins_build_get($name, $build_id, $response);

  if (200 != $response->code) {
    return t('Log not available at this time.');
  }

  $json = json_decode($response->data);

  if (!$json->building) {
    $log_response = NULL;
    if (!jenkins_build_get_log($name, $build_id, $log_response)) {
      return '<h2>' . t('Error retrieving log.') . '</h2>';
    }

    return '<h2>' . t('Build complete.') . "</h2>\n<pre>" . check_plain($log_response->data) . '</pre>';
  }

  $settings = array(
    'name' => $name,
    'build_id' => (int) $build_id,
    'offset' => 0,
  );
  drupal_add_js(array('jenkins' => $settings), 'setting');
  return '<div id="jenkins-log"><h2>' . t('Build running') . '</h2><pre></pre><div id="jenkins-throbber">&nbsp;</div></div>';
}

/**
 * Stream a Jenkins log.
 */
function jenkins_stream_log($name, $build_id, $offset = 0) {
  $response = NULL;
  jenkins_request("/job/{$name}/{$build_id}/logText/progressiveText", $response, array('start' => $offset));
  if (200 != $response->code) {
    return t('Log not available at this time');
  }

  $done = TRUE;
  if (!empty($response->headers['x-more-data'])) {
    $done = FALSE;
  }

  $log = $response->data;
  $offset = (int) $response->headers['x-text-size'];

  $output = array(
    'done' => $done,
    'log' => $log,
    'offset' => $offset,
  );

  return drupal_json_output($output);
}
